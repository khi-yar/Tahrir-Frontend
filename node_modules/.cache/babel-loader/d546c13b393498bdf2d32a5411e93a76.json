{"ast":null,"code":"import _slicedToArray from \"/home/smp/workspace/projects/TahrirProject/Tahrir-Frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/smp/workspace/projects/TahrirProject/Tahrir-Frontend/src/components/Result/index.js\";\nimport React, { useState } from \"react\";\nimport useAxios from \"axios-hooks\";\nimport { SelectedResult } from \"../index\";\nimport { Row, Col } from \"react-bootstrap\";\nexport default (function (props) {\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      selectedResult = _useState2[0],\n      setSelectedResult = _useState2[1];\n\n  var _useAxios = useAxios({\n    url: \"/translation/get?word=\".concat(props.word, \"&lang=\").concat(props.lang),\n    method: \"get\"\n  }),\n      _useAxios2 = _slicedToArray(_useAxios, 2),\n      _useAxios2$ = _useAxios2[0],\n      data = _useAxios2$.data,\n      loading = _useAxios2$.loading,\n      error = _useAxios2$.error,\n      refetchFromPersian = _useAxios2[1];\n\n  if (loading || error) return null;\n  console.log(data);\n  return React.createElement(React.Fragment, null, React.createElement(Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, data.translations.map(function (item) {\n    return React.createElement(Col, {\n      key: item.translation,\n      onClick: function onClick() {\n        return setSelectedResult(item);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24\n      },\n      __self: this\n    }, item.translation);\n  })), selectedResult.translation !== undefined ? React.createElement(SelectedResult, {\n    selected: selectedResult,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }) : null);\n});","map":{"version":3,"sources":["/home/smp/workspace/projects/TahrirProject/Tahrir-Frontend/src/components/Result/index.js"],"names":["React","useState","useAxios","SelectedResult","Row","Col","props","selectedResult","setSelectedResult","url","word","lang","method","data","loading","error","refetchFromPersian","console","log","translations","map","item","translation","undefined"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,SAAQC,cAAR,QAA6B,UAA7B;AAEA,SAASC,GAAT,EAAcC,GAAd,QAAyB,iBAAzB;AAEA,gBAAe,UAAAC,KAAK,EAAI;AAAA,kBACsBL,QAAQ,CAAC,EAAD,CAD9B;AAAA;AAAA,MACfM,cADe;AAAA,MACCC,iBADD;;AAAA,kBAEiCN,QAAQ,CAAC;AAC9DO,IAAAA,GAAG,kCAA2BH,KAAK,CAACI,IAAjC,mBAA8CJ,KAAK,CAACK,IAApD,CAD2D;AAE9DC,IAAAA,MAAM,EAAE;AAFsD,GAAD,CAFzC;AAAA;AAAA;AAAA,MAEbC,IAFa,eAEbA,IAFa;AAAA,MAEPC,OAFO,eAEPA,OAFO;AAAA,MAEEC,KAFF,eAEEA,KAFF;AAAA,MAEWC,kBAFX;;AAOtB,MAAGF,OAAO,IAAIC,KAAd,EAAqB,OAAO,IAAP;AAErBE,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AAEA,SACE,0CACE,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCA,IAAI,CAACM,YAAL,CAAkBC,GAAlB,CAAsB,UAAAC,IAAI,EAAI;AAC7B,WACE,oBAAC,GAAD;AAAK,MAAA,GAAG,EAAEA,IAAI,CAACC,WAAf;AAA4B,MAAA,OAAO,EAAE;AAAA,eAAMd,iBAAiB,CAACa,IAAD,CAAvB;AAAA,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,IAAI,CAACC,WADR,CADF;AAKD,GANA,CADD,CADF,EAUCf,cAAc,CAACe,WAAf,KAA+BC,SAA/B,GACC,oBAAC,cAAD;AAAgB,IAAA,QAAQ,EAAEhB,cAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,GAEG,IAZJ,CADF;AAgBD,CA3BD","sourcesContent":["import React, {useState} from \"react\";\nimport useAxios from \"axios-hooks\";\n\nimport {SelectedResult} from \"../index\"\n\nimport { Row, Col } from \"react-bootstrap\";\n\nexport default props => {\n  const [selectedResult, setSelectedResult] = useState({});\n  const [{ data, loading, error }, refetchFromPersian] = useAxios({\n    url: `/translation/get?word=${props.word}&lang=${props.lang}`,\n    method: \"get\"\n  });\n\n  if(loading || error) return null\n\n  console.log(data)\n\n  return (\n    <>\n      <Row>\n      {data.translations.map(item => {\n        return (\n          <Col key={item.translation} onClick={() => setSelectedResult(item)}>\n            {item.translation}\n          </Col>\n        )\n      })}\n    </Row>\n    {selectedResult.translation !== undefined ? (\n      <SelectedResult selected={selectedResult} />\n    ) : null}\n    </>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}