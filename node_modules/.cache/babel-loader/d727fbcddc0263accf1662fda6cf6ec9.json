{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from 'react';\nimport DefaultAxios from 'axios';\nimport LRU from 'lru-cache';\nvar actions = {\n  REQUEST_START: 'REQUEST_START',\n  REQUEST_END: 'REQUEST_END'\n};\nvar ssrPromises = [];\nvar cache = new LRU();\nvar axiosInstance = DefaultAxios;\nexport function configure(options) {\n  if (options.axios) {\n    axiosInstance = options.axios;\n  }\n\n  if (options.cache) {\n    cache = options.cache;\n  }\n}\nexport function loadCache(data) {\n  cache.load(data);\n}\nexport function serializeCache() {\n  return _serializeCache.apply(this, arguments);\n}\n\nfunction _serializeCache() {\n  _serializeCache = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee() {\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return Promise.all(ssrPromises);\n\n          case 2:\n            ssrPromises.length = 0;\n            return _context.abrupt(\"return\", cache.dump());\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _serializeCache.apply(this, arguments);\n}\n\nfunction cacheAdapter(_x) {\n  return _cacheAdapter.apply(this, arguments);\n}\n\nfunction _cacheAdapter() {\n  _cacheAdapter = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(config) {\n    var cacheKey, hit, response, responseForCache;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            cacheKey = JSON.stringify(config);\n            hit = cache.get(cacheKey);\n\n            if (!hit) {\n              _context2.next = 4;\n              break;\n            }\n\n            return _context2.abrupt(\"return\", hit);\n\n          case 4:\n            delete config.adapter;\n            _context2.next = 7;\n            return axiosInstance(config);\n\n          case 7:\n            response = _context2.sent;\n            responseForCache = _extends({}, response);\n            delete responseForCache.config;\n            delete responseForCache.request;\n            cache.set(cacheKey, responseForCache);\n            return _context2.abrupt(\"return\", response);\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _cacheAdapter.apply(this, arguments);\n}\n\nfunction createInitialState(options) {\n  return {\n    loading: !options.manual\n  };\n}\n\nfunction reducer(state, action) {\n  var _extends2;\n\n  switch (action.type) {\n    case actions.REQUEST_START:\n      return _extends({}, state, {\n        loading: true\n      });\n\n    case actions.REQUEST_END:\n      return _extends({}, state, {\n        loading: false\n      }, action.error ? {} : {\n        data: action.payload.data\n      }, (_extends2 = {}, _extends2[action.error ? 'error' : 'response'] = action.payload, _extends2));\n\n    default:\n      return state;\n  }\n}\n\nfunction request(_x2, _x3) {\n  return _request.apply(this, arguments);\n}\n\nfunction _request() {\n  _request = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(config, dispatch) {\n    var response;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            dispatch({\n              type: actions.REQUEST_START\n            });\n            _context3.next = 4;\n            return axiosInstance(config);\n\n          case 4:\n            response = _context3.sent;\n            dispatch({\n              type: actions.REQUEST_END,\n              payload: response\n            });\n            _context3.next = 11;\n            break;\n\n          case 8:\n            _context3.prev = 8;\n            _context3.t0 = _context3[\"catch\"](0);\n            dispatch({\n              type: actions.REQUEST_END,\n              payload: _context3.t0,\n              error: true\n            });\n\n          case 11:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this, [[0, 8]]);\n  }));\n  return _request.apply(this, arguments);\n}\n\nfunction executeRequestWithCache(config, dispatch) {\n  request(_extends({}, config, {\n    adapter: cacheAdapter\n  }), dispatch);\n}\n\nfunction executeRequestWithoutCache(config, dispatch) {\n  return request(config, dispatch);\n}\n\nexport default function useAxios(config, options) {\n  if (options === void 0) {\n    options = {\n      manual: false\n    };\n  }\n\n  if (typeof config === 'string') {\n    config = {\n      url: config\n    };\n  }\n\n  var _React$useReducer = React.useReducer(reducer, createInitialState(options)),\n      state = _React$useReducer[0],\n      dispatch = _React$useReducer[1];\n\n  if (typeof window === 'undefined') {\n    ssrPromises.push(axiosInstance(_extends({}, config, {\n      adapter: cacheAdapter\n    })));\n  }\n\n  React.useEffect(function () {\n    if (!options.manual) {\n      executeRequestWithCache(config, dispatch);\n    }\n  }, [JSON.stringify(config)]);\n  return [state, function (configOverride) {\n    return executeRequestWithoutCache(_extends({}, config, configOverride), dispatch);\n  }];\n}","map":null,"metadata":{},"sourceType":"module"}